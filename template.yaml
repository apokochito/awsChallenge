AWSTemplateFormatVersion: '2010-09-09'

Description: API Gateway with Lambda Integration

Resources:
  # Apigateway role definition
  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaFunction.Arn
  # Lambda role definition
  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Path: '/'
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:*'
                Resource: '*'
                Effect: Allow
  # Api Gateway Rest Api definition
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API Gateway with Lambda Integration
      Name: task-apigateway-restapi
  # Lambda definition
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          def handler(event, context):
                      return {
                        'statusCode': 200,
                        'body': json.dumps('Hello, World!')
                      }
      Description: AWS Lambda function
      FunctionName: 'task-lambda-function'
      Handler: lambda_function.lambda_handler
      MemorySize: 400
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.9
      Timeout: 100
      Environment:
        Variables:
          LOGGER_LEVEL: INFO
  # S3 Bucket definition
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: sam-demo-cloudformation-1
      AccessControl: PublicRead
    DeletionPolicy: Delete